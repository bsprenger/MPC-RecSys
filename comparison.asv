%% Monte Carlo Simulation for Model-free vs. Model-based Approaches

clear
close all
clc

%% Parameters
num_trials = 100; % Number of Monte Carlo trials
T = 10; % Time horizon
iters = 30; % Number of iterations

%% Initialize storage structures
results = struct();

for trials=1:num_trials
    %% Generate dynamics with random number of users
    num_users = randi([10, 20]);
    
    W = generateRowStochasticMatrix(num_users,num_users+1);
    Lambda = diag(rand([num_users 1]));
    
    A = (eye(num_users) - Lambda)*W(:,1:end-1);
    B = (eye(num_users) - Lambda)*W(:,end);
    
    x0 = rand([num_users 1]);
    
    %% Solve Recommendation Systems
    [mpc_state,mpc_input,mpc_cost] = solveMPC(A,B,Lambda,x0,T,iters);
    [mf_state,mf_input,mf_cost] = solveModelFree(A,B,Lambda,x0,iters);

    controlled_steady_state_mpc = mpc_state(:, end);
    controlled_steady_state_mf = mf_state(:, end);
    
    %% Calculate uncontrolled steady-state
    % remove rec sys column
    W_new = W(:,1:end-1);
    
    % calculate the sum of each row without the rec sys
    W_new_sums = sum(W_new,2);
    
    % re-scale each row so that it is row-stochastic
    for i=1:num_users
        W_new(i,:) = W_new(i,:)/W_new_sums(i);
    end
    uncontrolled_steady_state = (eye(num_users) - (eye(num_users) - Lambda)*W_new)\Lambda;
    
    %% Calculate statistics
    % Total cost of each approach over the horizon
    total_mpc_cost = sum(mpc_cost);
    total_mf_cost = sum(mf_cost);
    
    % steady-state cost
    steady_state_mpc_cost = mpc_cost
    
    % final opinion shift relative to the uncontrolled system 
    opinion_shift_mpc = norm(controlled_steady_state_mpc - uncontrolled_steady_state);
    opinion_shift_mf = norm(controlled_steady_state_mf - uncontrolled_steady_state);
    
    %% Save results
    results(trial).mpc_state = mpc_state;
    results(trial).mpc_input = mpc_input;
    results(trial).mpc_cost = mpc_cost;
    results(trial).mf_state = mf_state;
    results(trial).mf_input = mf_input;
    results(trial).mf_cost = mf_cost;
    results(trial).A = A;
    results(trial).B = B;
    results(trial).Lambda = Lambda;
    results(trial).x0 = x0;
    results(trial).total_mpc_cost = total_mpc_cost;
    results(trial).total_mf_cost = total_mf_cost;
    results(trial).steady_state_mpc_cost = 

end


%% Sanity check
figure_configuration_IEEE_standard

figure;
% For IEEE:
set(gca, 'FontName', 'Times')
set(groot,'defaultAxesFontName','Times New Roman')

% plot the states
plot(0:iters,mpc_state','Color',[1 0 0 1],'LineWidth',1.5);
set(gca, 'FontName', 'Times New Roman')
hold on;
plot(0:iters,mf_state','Color', [0 0 1 1],'LineWidth',1.5);
% plot(0:iters,uncontrolled_results','Color', [0.6 0.6 0.6 1],'LineStyle','--','LineWidth',1.5)

% plot recommendations
plot(0:iters,mpc_input,'Color',[1 0 0 1],'LineStyle','-')
plot(0:iters,mf_input,'Color',[0 0 1 1],'LineStyle','-');

xlabel('Update Step (t)','FontName','Times New Roman')
ylabel('Opinion')
legend({'User Opinions (MPC)','','','','','','User Opinions (Model-Free)',...
    '','','','','','User Opinions (Uncontrolled)','','','','','',...
    'Recommendation (MPC)','Recommendation (Model-Free)'},...
    'Location','northeast')

% % plot the cost at each step
% figure;
% plot(0:iters,mpc_cost,'Color',[1 0 0 1])
% hold on
% plot(0:iters,mf_cost,'Color',[0 0 1 1]);
% legend({'MPC','Model-Free'},'Location','northeast')
% xlabel("Update Step (t)")
% ylabel("Step Cost")